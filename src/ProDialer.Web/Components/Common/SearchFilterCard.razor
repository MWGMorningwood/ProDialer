@* Search Filter Card Component - Reusable filtering interface *@

<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            @if (ShowSearch)
            {
                <div class="col-md-@SearchColumnWidth">
                    <label class="form-label small">@SearchLabel</label>
                    <input type="text" 
                           class="form-control" 
                           placeholder="@SearchPlaceholder" 
                           @bind="SearchTerm" 
                           @onkeyup="OnSearchKeyUp" />
                </div>
            }
            
            @if (Filters != null && Filters.Any())
            {
                @foreach (var filter in Filters)
                {
                    <div class="col-md-@filter.ColumnWidth">
                        <label class="form-label small">@filter.Label</label>
                        @if (filter.Type == FilterType.Dropdown)
                        {
                            <select class="form-control" @bind="filter.Value">
                                @if (filter.Options != null)
                                {
                                    @foreach (var option in filter.Options)
                                    {
                                        <option value="@option.Value">@option.Text</option>
                                    }
                                }
                            </select>
                        }
                        else if (filter.Type == FilterType.DateRange)
                        {
                            <input type="date" class="form-control" @bind-value="filter.DateValue" />
                        }
                        else if (filter.Type == FilterType.Checkbox)
                        {
                            <div class="form-check mt-2">
                                <input class="form-check-input" type="checkbox" @bind="filter.BoolValue" />
                                <label class="form-check-label small">
                                    @filter.CheckboxLabel
                                </label>
                            </div>
                        }
                    </div>
                }
            }
            
            <div class="col-md-@ActionsColumnWidth">
                <label class="form-label small">Actions</label>
                <div class="d-flex gap-2">
                    <button class="btn btn-secondary btn-sm" @onclick="OnApplyFilters">Apply</button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="OnClearFilters">Clear</button>
                    @if (CustomActions != null)
                    {
                        @CustomActions
                    }
                </div>
            </div>
        </div>
        
        @if (ShowSecondRow)
        {
            <div class="row mt-2">
                @SecondRowContent
                
                <div class="col-md-6 text-end">
                    <small class="text-muted">
                        @if (ResultSummary != null)
                        {
                            @ResultSummary
                        }
                        else
                        {
                            <text>Showing @CurrentCount of @TotalCount items</text>
                            @if (HasActiveFilters)
                            {
                                <span class="text-info">(filtered)</span>
                            }
                        }
                    </small>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public string SearchLabel { get; set; } = "Search";
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public string SearchTerm { get; set; } = string.Empty;
    [Parameter] public int SearchColumnWidth { get; set; } = 3;
    
    [Parameter] public List<FilterItem>? Filters { get; set; }
    [Parameter] public int ActionsColumnWidth { get; set; } = 3;
    
    [Parameter] public bool ShowSecondRow { get; set; } = false;
    [Parameter] public RenderFragment? SecondRowContent { get; set; }
    [Parameter] public RenderFragment? CustomActions { get; set; }
    
    [Parameter] public int CurrentCount { get; set; } = 0;
    [Parameter] public int TotalCount { get; set; } = 0;
    [Parameter] public bool HasActiveFilters { get; set; } = false;
    [Parameter] public RenderFragment? ResultSummary { get; set; }
    
    [Parameter] public EventCallback<string> OnSearchChanged { get; set; }
    [Parameter] public EventCallback OnApplyFilters { get; set; }
    [Parameter] public EventCallback OnClearFilters { get; set; }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && OnSearchChanged.HasDelegate)
        {
            await OnSearchChanged.InvokeAsync(SearchTerm);
        }
    }

    public class FilterItem
    {
        public string Label { get; set; } = string.Empty;
        public FilterType Type { get; set; } = FilterType.Dropdown;
        public int ColumnWidth { get; set; } = 2;
        public string Value { get; set; } = string.Empty;
        public bool BoolValue { get; set; } = false;
        public DateTime? DateValue { get; set; }
        public string? CheckboxLabel { get; set; }
        public List<FilterOption>? Options { get; set; }
    }

    public class FilterOption
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }

    public enum FilterType
    {
        Dropdown,
        DateRange,
        Checkbox
    }
}
