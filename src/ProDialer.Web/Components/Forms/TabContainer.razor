@* Tab Container Component - Reusable tabbed interface *@

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4 class="mb-0">@Title</h4>
        @if (ShowTabButtons)
        {
            <div class="btn-group btn-group-sm" role="group">
                @foreach (var tab in Tabs)
                {
                    <button type="button" 
                            class="btn @(ActiveTab == tab.Id ? "btn-primary" : "btn-outline-primary")" 
                            @onclick="() => SetActiveTab(tab.Id)">
                        @if (!string.IsNullOrEmpty(tab.Icon))
                        {
                            <i class="@tab.Icon me-1"></i>
                        }
                        @tab.Title
                    </button>
                }
            </div>
        }
        @if (HeaderActions != null)
        {
            <div class="ms-auto">
                @HeaderActions
            </div>
        }
    </div>
    <div class="card-body">
        @if (ShowErrorAlert && !string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }
        
        @if (ShowSuccessAlert && !string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success" role="alert">
                @SuccessMessage
            </div>
        }

        @foreach (var tab in Tabs)
        {
            <div class="tab-content" style="display: @(ActiveTab == tab.Id ? "block" : "none")">
                @if (!string.IsNullOrEmpty(tab.Subtitle))
                {
                    <h5 class="mb-3 text-primary">@tab.Subtitle</h5>
                }
                @tab.Content
            </div>
        }
    </div>
    
    @if (FooterContent != null)
    {
        <div class="card-footer">
            @FooterContent
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string ActiveTab { get; set; } = string.Empty;
    [Parameter] public List<TabItem> Tabs { get; set; } = new();
    [Parameter] public EventCallback<string> OnTabChanged { get; set; }
    
    [Parameter] public bool ShowTabButtons { get; set; } = true;
    [Parameter] public bool ShowErrorAlert { get; set; } = true;
    [Parameter] public bool ShowSuccessAlert { get; set; } = true;
    
    [Parameter] public string? ErrorMessage { get; set; }
    [Parameter] public string? SuccessMessage { get; set; }
    
    [Parameter] public RenderFragment? HeaderActions { get; set; }
    [Parameter] public RenderFragment? FooterContent { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(ActiveTab) && Tabs.Any())
        {
            ActiveTab = Tabs.First().Id;
        }
    }

    private async Task SetActiveTab(string tabId)
    {
        ActiveTab = tabId;
        if (OnTabChanged.HasDelegate)
        {
            await OnTabChanged.InvokeAsync(tabId);
        }
    }

    public class TabItem
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string? Subtitle { get; set; }
        public string? Icon { get; set; }
        public RenderFragment Content { get; set; } = default!;
    }
}
