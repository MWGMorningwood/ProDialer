@page "/agents"
@using ProDialer.Shared.DTOs
@using ProDialer.Web.Components.Common
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Agents</h1>
                <a href="/agents/create" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>Add Agent
                </a>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }

            @if (agents == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!agents.Any())
            {
                <div class="text-center">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">No Agents Found</h5>
                            <p class="card-text">You haven't added any agents yet.</p>
                            <a href="/agents/create" class="btn btn-primary">Add Your First Agent</a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Agent Status Overview -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="card-title mb-1">Available</h5>
                                        <h2 class="mb-0">@agents.Count(a => a.Status == "Available")</h2>
                                    </div>
                                    <div class="opacity-75">
                                        <i class="fas fa-user-check fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="card-title mb-1">Busy</h5>
                                        <h2 class="mb-0">@agents.Count(a => a.Status == "Busy")</h2>
                                    </div>
                                    <div class="opacity-75">
                                        <i class="fas fa-phone fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="card-title mb-1">On Break</h5>
                                        <h2 class="mb-0">@agents.Count(a => a.Status == "OnBreak")</h2>
                                    </div>
                                    <div class="opacity-75">
                                        <i class="fas fa-pause-circle fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-secondary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="card-title mb-1">Offline</h5>
                                        <h2 class="mb-0">@agents.Count(a => a.Status == "Offline")</h2>
                                    </div>
                                    <div class="opacity-75">
                                        <i class="fas fa-user-slash fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <DataTable TItem="AgentSummaryDto" Items="agents" Title="Agents" 
                          EmptyTitle="No Agents Found" EmptyMessage="You haven't added any agents yet."
                          EmptyAction="@EmptyAction" Columns="@AgentColumns" />
            }
        </div>
    </div>
</div>

@code {
    private List<AgentSummaryDto> agents = new();
    private string? errorMessage;
    private string? successMessage;

    // Empty action for the DataTable
    private RenderFragment EmptyAction => @<a href="/agents/create" class="btn btn-primary">Add Your First Agent</a>;

    // Column definitions for the DataTable
    private List<DataTable<AgentSummaryDto>.TableColumn<AgentSummaryDto>> AgentColumns => new()
    {
        new() { 
            Title = "Name", 
            Template = agent => @<div class="d-flex align-items-center">
                <StatusBadge Status="@agent.Status" ShowIndicator="true" />
                <div>
                    <strong>@agent.FirstName @agent.LastName</strong>
                    @if (!string.IsNullOrEmpty(agent.Role))
                    {
                        <br /><small class="text-muted">@agent.Role</small>
                    }
                </div>
            </div>
        },
        new() {
            Title = "Email",
            Template = agent => @<text>
                @if (!string.IsNullOrEmpty(agent.Email))
                {
                    <a href="mailto:@agent.Email">@agent.Email</a>
                }
            </text>
        },
        new() {
            Title = "Phone",
            Template = agent => @<text>@(agent.PhoneNumber ?? "N/A")</text>
        },
        new() {
            Title = "Status",
            Template = agent => @<StatusBadge Status="@agent.Status" />
        },
        new() {
            Title = "Current Call",
            Template = agent => @<span class="text-muted">None</span>
        },
        new() {
            Title = "Total Calls",
            PropertyName = "TotalCalls"
        },
        new() {
            Title = "Last Login",
            Template = agent => @<text>
                @if (agent.LastLoggedOutAt.HasValue)
                {
                    @agent.LastLoggedOutAt.Value.ToString("MM/dd/yyyy HH:mm")
                }
                else
                {
                    <span class="text-muted">Never</span>
                }
            </text>
        },
        new() {
            Title = "Actions",
            Template = agent => @<ActionButtonGroup 
                ShowView="true" OnView="@(() => Navigation.NavigateTo($"/agents/{agent.Id}"))"
                ShowEdit="true" OnEdit="@(() => Navigation.NavigateTo($"/agents/{agent.Id}/edit"))"
                ShowDelete="true" OnDelete="@(() => DeleteAgent(agent.Id))"
                ShowCustomActions="true" CustomActions="@GetCustomActions(agent)" />
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
    }

    private async Task LoadAgents()
    {
        try
        {
            errorMessage = null;
            agents = await Http.GetFromJsonAsync<List<AgentSummaryDto>>("api/agents") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load agents: {ex.Message}";
        }
    }

    private List<ActionButtonGroup.CustomAction> GetCustomActions(AgentSummaryDto agent)
    {
        var actions = new List<ActionButtonGroup.CustomAction>();

        // Add status-specific actions
        if (agent.Status == "Available")
        {
            actions.Add(new() {
                Title = "Set On Break",
                Icon = "fas fa-pause",
                OnClick = EventCallback.Factory.Create(this, () => HandleStatusChange(agent.Id, "OnBreak")),
                CssClass = "btn-outline-warning"
            });
        }
        else if (agent.Status == "OnBreak")
        {
            actions.Add(new() {
                Title = "Set Available",
                Icon = "fas fa-play",
                OnClick = EventCallback.Factory.Create(this, () => HandleStatusChange(agent.Id, "Available")),
                CssClass = "btn-outline-success"
            });
        }

        return actions;
    }

    private async Task SetAgentStatus(int agentId, string status)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"api/agents/{agentId}/status", new { Status = status });
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Agent status updated to {status}.";
                await LoadAgents(); // Reload the list
            }
            else
            {
                errorMessage = "Failed to update agent status.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update agent status: {ex.Message}";
        }
    }

    private async Task HandleStatusChange(int agentId, string newStatus)
    {
        await SetAgentStatus(agentId, newStatus);
    }

    private async Task DeleteAgent(int agentId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this agent? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/agents/{agentId}");
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Agent deleted successfully.";
                    await LoadAgents(); // Reload the list
                }
                else
                {
                    errorMessage = "Failed to delete agent.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to delete agent: {ex.Message}";
            }
        }
    }
}
