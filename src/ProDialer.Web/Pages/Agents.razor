@page "/agents"
@using ProDialer.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Agents</h1>
                <a href="/agents/create" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>Add Agent
                </a>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }

            @if (agents == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!agents.Any())
            {
                <div class="text-center">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">No Agents Found</h5>
                            <p class="card-text">You haven't added any agents yet.</p>
                            <a href="/agents/create" class="btn btn-primary">Add Your First Agent</a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Agent Status Overview -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <h5 class="card-title">Available</h5>
                                <h2>@agents.Count(a => a.Status == "Available")</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <h5 class="card-title">Busy</h5>
                                <h2>@agents.Count(a => a.Status == "Busy")</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <h5 class="card-title">On Break</h5>
                                <h2>@agents.Count(a => a.Status == "OnBreak")</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-secondary text-white">
                            <div class="card-body">
                                <h5 class="card-title">Offline</h5>
                                <h2>@agents.Count(a => a.Status == "Offline")</h2>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Phone</th>
                                        <th>Status</th>
                                        <th>Current Call</th>
                                        <th>Total Calls</th>
                                        <th>Last Login</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var agent in agents)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="status-indicator me-2 @GetStatusIndicatorClass(agent.Status)"></div>
                                                    <div>
                                                        <strong>@agent.FirstName @agent.LastName</strong>
                                                        @if (!string.IsNullOrEmpty(agent.Role))
                                                        {
                                                            <br /><small class="text-muted">@agent.Role</small>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(agent.Email))
                                                {
                                                    <a href="mailto:@agent.Email">@agent.Email</a>
                                                }
                                            </td>
                                            <td>@(agent.PhoneNumber ?? "N/A")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(agent.Status)">@agent.Status</span>
                                            </td>
                                            <td>
                                                <span class="text-muted">None</span>
                                            </td>
                                            <td>@agent.TotalCalls</td>
                                            <td>
                                                @if (agent.LastLoggedOutAt.HasValue)
                                                {
                                                    @agent.LastLoggedOutAt.Value.ToString("MM/dd/yyyy HH:mm")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Never</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a href="/agents/@agent.Id" class="btn btn-sm btn-outline-primary" title="View">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a href="/agents/@agent.Id/edit" class="btn btn-sm btn-outline-secondary" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    @{
                                                        var onBreakAction = EventCallback.Factory.Create(this, () => HandleStatusChange(agent.Id, "OnBreak"));
                                                        var availableAction = EventCallback.Factory.Create(this, () => HandleStatusChange(agent.Id, "Available"));
                                                    }
                                                    @if (agent.Status == "Available")
                                                    {
                                                        <button class="btn btn-sm btn-outline-warning" @onclick="onBreakAction" title="Set On Break">
                                                            <i class="fas fa-pause"></i>
                                                        </button>
                                                    }
                                                    else if (agent.Status == "OnBreak")
                                                    {
                                                        <button class="btn btn-sm btn-outline-success" @onclick="availableAction" title="Set Available">
                                                            <i class="fas fa-play"></i>
                                                        </button>
                                                    }
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAgent(agent.Id)" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .status-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
    }
    
    .status-available {
        background-color: #28a745;
    }
    
    .status-busy {
        background-color: #ffc107;
    }
    
    .status-onbreak {
        background-color: #17a2b8;
    }
    
    .status-offline {
        background-color: #6c757d;
    }
</style>

@code {
    private List<AgentSummaryDto> agents = new();
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
    }

    private async Task LoadAgents()
    {
        try
        {
            errorMessage = null;
            agents = await Http.GetFromJsonAsync<List<AgentSummaryDto>>("api/agents") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load agents: {ex.Message}";
        }
    }

    private async Task SetAgentStatus(int agentId, string status)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"api/agents/{agentId}/status", new { Status = status });
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Agent status updated to {status}.";
                await LoadAgents(); // Reload the list
            }
            else
            {
                errorMessage = "Failed to update agent status.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update agent status: {ex.Message}";
        }
    }

    private async Task HandleStatusChange(int agentId, string newStatus)
    {
        await SetAgentStatus(agentId, newStatus);
    }

    private async Task DeleteAgent(int agentId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this agent? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/agents/{agentId}");
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Agent deleted successfully.";
                    await LoadAgents(); // Reload the list
                }
                else
                {
                    errorMessage = "Failed to delete agent.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to delete agent: {ex.Message}";
            }
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Available" => "bg-success",
            "Busy" => "bg-warning",
            "OnBreak" => "bg-info",
            "Offline" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusIndicatorClass(string status)
    {
        return status switch
        {
            "Available" => "status-available",
            "Busy" => "status-busy",
            "OnBreak" => "status-onbreak",
            "Offline" => "status-offline",
            _ => "status-offline"
        };
    }
}
