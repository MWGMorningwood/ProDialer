@page "/leads"
@page "/lists/{ListId:int}/leads"
@using ProDialer.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    @if (ListId.HasValue)
                    {
                        <span>Leads - List @ListId</span>
                    }
                    else
                    {
                        <span>All Leads</span>
                    }
                </h1>
                <div>
                    @if (ListId.HasValue)
                    {
                        <a href="/lists/@ListId/leads/create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>Add Lead
                        </a>
                        <button class="btn btn-secondary ms-2" @onclick="ShowImportModal">
                            <i class="fas fa-upload me-2"></i>Import Leads
                        </button>
                    }
                    else
                    {
                        <a href="/leads/create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>Create New Lead
                        </a>
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }

            <!-- Enhanced Filters -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="form-label small">Search Leads</label>
                            <input type="text" class="form-control" placeholder="Name, phone, email..." @bind="searchTerm" @onkeyup="OnSearchKeyUp" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small">Status</label>
                            <select class="form-control" @bind="statusFilter">
                                <option value="">All Statuses</option>
                                <option value="NEW">New</option>
                                <option value="CALLED">Called</option>
                                <option value="CONTACTED">Contacted</option>
                                <option value="CALLBACK">Callback</option>
                                <option value="DNC">Do Not Call</option>
                                <option value="DISCONNECTED">Disconnected</option>
                                <option value="BUSY">Busy</option>
                                <option value="ANSWERING_MACHINE">Answering Machine</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small">Lifecycle Stage</label>
                            <select class="form-control" @bind="lifecycleFilter">
                                <option value="">All Stages</option>
                                <option value="NEW">New</option>
                                <option value="QUALIFIED">Qualified</option>
                                <option value="CONTACTED">Contacted</option>
                                <option value="CONVERTED">Converted</option>
                                <option value="RECYCLED">Recycled</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small">Quality Score</label>
                            <select class="form-control" @bind="qualityFilter">
                                <option value="">All Scores</option>
                                <option value="80-100">High (80-100)</option>
                                <option value="60-79">Medium (60-79)</option>
                                <option value="40-59">Fair (40-59)</option>
                                <option value="0-39">Low (0-39)</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small">Actions</label>
                            <div class="d-flex gap-2">
                                <button class="btn btn-secondary btn-sm" @onclick="ApplyFilters">Apply</button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="ClearFilters">Clear</button>
                                <div class="text-muted small align-self-center ms-2">
                                    @totalLeads leads total
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-2">
                        <div class="col-md-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="hideExcluded" />
                                <label class="form-check-label small">
                                    Hide Excluded/Opted Out
                                </label>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="scheduledCallbacksOnly" />
                                <label class="form-check-label small">
                                    Scheduled Callbacks Only
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <small class="text-muted">
                                Showing @leads.Count of @totalLeads leads
                                @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(statusFilter) || !string.IsNullOrEmpty(lifecycleFilter))
                                {
                                    <span class="text-info">(filtered)</span>
                                }
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            @if (leads == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!leads.Any())
            {
                <div class="text-center">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">No Leads Found</h5>
                            <p class="card-text">
                                @if (ListId.HasValue)
                                {
                                    <span>This list doesn't have any leads yet.</span>
                                }
                                else
                                {
                                    <span>You haven't created any leads yet.</span>
                                }
                            </p>
                            @if (ListId.HasValue)
                            {
                                <a href="/lists/@ListId/leads/create" class="btn btn-primary">Add Your First Lead</a>
                            }
                            else
                            {
                                <a href="/leads/create" class="btn btn-primary">Create Your First Lead</a>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Phone</th>
                                        <th>Email</th>
                                        <th>Status</th>
                                        <th>Lifecycle</th>
                                        <th>Priority</th>
                                        <th>Quality Score</th>
                                        <th>Call Count</th>
                                        <th>Last Called</th>
                                        <th>Next Callback</th>
                                        <th>Owner</th>
                                        <th>Flags</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var lead in leads)
                                    {
                                        <tr class="@GetRowClass(lead)">
                                            <td>
                                                <strong>@lead.FirstName @lead.LastName</strong>
                                                @if (!string.IsNullOrEmpty(lead.Company))
                                                {
                                                    <br /><small class="text-muted">@lead.Company</small>
                                                }
                                                @if (!string.IsNullOrEmpty(lead.FullName) && lead.FullName != $"{lead.FirstName} {lead.LastName}")
                                                {
                                                    <br /><small class="text-info">@lead.FullName</small>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(lead.PrimaryPhone))
                                                {
                                                    <a href="tel:@lead.PrimaryPhone">@lead.PrimaryPhone</a>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(lead.PrimaryEmail))
                                                {
                                                    <a href="mailto:@lead.PrimaryEmail">@lead.PrimaryEmail</a>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(lead.Status)">@lead.Status</span>
                                                @if (!string.IsNullOrEmpty(lead.Disposition))
                                                {
                                                    <br /><small class="text-muted">@lead.Disposition</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge @GetLifecycleBadgeClass(lead.LifecycleStage)">@lead.LifecycleStage</span>
                                            </td>
                                            <td>
                                                <span class="badge @GetPriorityBadgeClass(lead.Priority)">@lead.Priority</span>
                                                @if (lead.Rank > 0)
                                                {
                                                    <br /><small class="text-muted">Rank: @lead.Rank</small>
                                                }
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="progress me-2" style="width: 60px; height: 8px;">
                                                        <div class="progress-bar @GetQualityScoreClass(lead.QualityScore)" 
                                                             style="width: @(lead.QualityScore)%"></div>
                                                    </div>
                                                    <small>@lead.QualityScore</small>
                                                </div>
                                            </td>
                                            <td>
                                                @lead.CallCount
                                                @if (lead.CalledCount > 0)
                                                {
                                                    <br /><small class="text-muted">(@lead.CalledCount total)</small>
                                                }
                                            </td>
                                            <td>
                                                @if (lead.LastCallAttempt.HasValue)
                                                {
                                                    @lead.LastCallAttempt.Value.ToString("MM/dd/yyyy HH:mm")
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Never</span>
                                                }
                                            </td>
                                            <td>
                                                @if (lead.ScheduledCallbackAt.HasValue)
                                                {
                                                    var callbackClass = lead.ScheduledCallbackAt.Value < DateTime.Now ? "text-danger" : "text-success";
                                                    <span class="@callbackClass">@lead.ScheduledCallbackAt.Value.ToString("MM/dd/yyyy HH:mm")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(lead.Owner))
                                                {
                                                    <span>@lead.Owner</span>
                                                }
                                                else if (!string.IsNullOrEmpty(lead.User))
                                                {
                                                    <span class="text-muted">@lead.User</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Unassigned</span>
                                                }
                                            </td>
                                            <td>
                                                @if (lead.IsExcluded)
                                                {
                                                    <i class="fas fa-ban text-danger" title="Excluded"></i>
                                                }
                                                @if (lead.HasOptedOut)
                                                {
                                                    <i class="fas fa-user-slash text-warning ms-1" title="Opted Out"></i>
                                                }
                                                @if (lead.ScheduledCallbackAt.HasValue && lead.ScheduledCallbackAt.Value > DateTime.Now)
                                                {
                                                    <i class="fas fa-clock text-success ms-1" title="Scheduled Callback"></i>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a href="/leads/@lead.Id" class="btn btn-sm btn-outline-primary" title="View">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a href="/leads/@lead.Id/edit" class="btn btn-sm btn-outline-secondary" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    @if (!lead.IsExcluded && !lead.HasOptedOut)
                                                    {
                                                        <button class="btn btn-sm btn-outline-success" @onclick="() => CallLead(lead.Id)" title="Call">
                                                            <i class="fas fa-phone"></i>
                                                        </button>
                                                    }
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteLead(lead.Id)" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if (totalLeads > leads.Count)
                        {
                            <div class="text-center mt-3">
                                <button class="btn btn-outline-primary" @onclick="LoadMoreLeads" disabled="@isLoadingMore">
                                    @if (isLoadingMore)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    }
                                    Load More (@(totalLeads - leads.Count) remaining)
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int? ListId { get; set; }
    
    private List<LeadSummaryDto> leads = new();
    private string? errorMessage;
    private string? successMessage;
    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;
    private string lifecycleFilter = string.Empty;
    private string qualityFilter = string.Empty;
    private bool hideExcluded = false;
    private bool scheduledCallbacksOnly = false;
    private int totalLeads = 0;
    private int currentPage = 1;
    private readonly int pageSize = 50;
    private bool isLoadingMore = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLeads();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reset when ListId parameter changes
        leads.Clear();
        currentPage = 1;
        await LoadLeads();
    }

    private async Task LoadLeads()
    {
        try
        {
            errorMessage = null;
            var url = ListId.HasValue 
                ? $"api/lists/{ListId}/leads?page={currentPage}&pageSize={pageSize}"
                : $"api/leads?page={currentPage}&pageSize={pageSize}";
                
            if (!string.IsNullOrEmpty(searchTerm))
                url += $"&search={Uri.EscapeDataString(searchTerm)}";
                
            if (!string.IsNullOrEmpty(statusFilter))
                url += $"&status={statusFilter}";
                
            if (!string.IsNullOrEmpty(lifecycleFilter))
                url += $"&lifecycle={lifecycleFilter}";
                
            if (!string.IsNullOrEmpty(qualityFilter))
                url += $"&quality={qualityFilter}";
                
            if (hideExcluded)
                url += $"&hideExcluded=true";
                
            if (scheduledCallbacksOnly)
                url += $"&scheduledCallbacksOnly=true";

            var response = await Http.GetFromJsonAsync<LeadListResponseDto>(url);
            if (response != null)
            {
                if (currentPage == 1)
                {
                    leads = response.Leads.ToList();
                }
                else
                {
                    leads.AddRange(response.Leads);
                }
                totalLeads = response.TotalCount;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load leads: {ex.Message}";
        }
    }

    private async Task LoadMoreLeads()
    {
        try
        {
            isLoadingMore = true;
            currentPage++;
            await LoadLeads();
        }
        finally
        {
            isLoadingMore = false;
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        leads.Clear();
        await LoadLeads();
    }

    private async Task ClearFilters()
    {
        searchTerm = string.Empty;
        statusFilter = string.Empty;
        lifecycleFilter = string.Empty;
        qualityFilter = string.Empty;
        hideExcluded = false;
        scheduledCallbacksOnly = false;
        await ApplyFilters();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ApplyFilters();
        }
    }

    private void CallLead(int leadId)
    {
        try
        {
            // This would integrate with Azure Communication Services
            successMessage = $"Initiating call to lead {leadId}...";
            // TODO: Implement actual calling functionality
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initiate call: {ex.Message}";
        }
    }

    private async Task DeleteLead(int leadId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this lead? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/leads/{leadId}");
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Lead deleted successfully.";
                    await LoadLeads(); // Reload the list
                }
                else
                {
                    errorMessage = "Failed to delete lead.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to delete lead: {ex.Message}";
            }
        }
    }

    private void ShowImportModal()
    {
        // TODO: Implement bulk import modal
        errorMessage = "Import functionality will be implemented in a future update.";
    }

    private string GetRowClass(LeadSummaryDto lead)
    {
        if (lead.IsExcluded) return "table-danger";
        if (lead.HasOptedOut) return "table-warning";
        if (lead.ScheduledCallbackAt.HasValue && lead.ScheduledCallbackAt.Value < DateTime.Now) return "table-info";
        return "";
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "NEW" => "bg-primary",
            "CALLED" => "bg-info",
            "CONTACTED" => "bg-success",
            "CALLBACK" => "bg-warning text-dark",
            "DNC" => "bg-danger",
            "DISCONNECTED" => "bg-secondary",
            "BUSY" => "bg-warning text-dark",
            "ANSWERING_MACHINE" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetLifecycleBadgeClass(string stage)
    {
        return stage switch
        {
            "NEW" => "bg-light text-dark",
            "QUALIFIED" => "bg-primary",
            "CONTACTED" => "bg-success",
            "CONVERTED" => "bg-success",
            "RECYCLED" => "bg-warning text-dark",
            _ => "bg-light text-dark"
        };
    }

    private string GetPriorityBadgeClass(int priority)
    {
        return priority switch
        {
            >= 8 => "bg-danger",
            >= 6 => "bg-warning text-dark",
            >= 4 => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private string GetQualityScoreClass(int score)
    {
        return score switch
        {
            >= 80 => "bg-success",
            >= 60 => "bg-primary",
            >= 40 => "bg-warning",
            _ => "bg-danger"
        };
    }
}
