@page "/leads"
@page "/lists/{ListId:int}/leads"
@using ProDialer.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    @if (ListId.HasValue)
                    {
                        <span>Leads - List @ListId</span>
                    }
                    else
                    {
                        <span>All Leads</span>
                    }
                </h1>
                <div>
                    @if (ListId.HasValue)
                    {
                        <a href="/lists/@ListId/leads/create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>Add Lead
                        </a>
                        <button class="btn btn-secondary ms-2" @onclick="ShowImportModal">
                            <i class="fas fa-upload me-2"></i>Import Leads
                        </button>
                    }
                    else
                    {
                        <a href="/leads/create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>Create New Lead
                        </a>
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }

            <!-- Enhanced Filters using SearchFilterCard Component -->
            <SearchFilterCard 
                SearchTerm="@searchTerm"
                SearchPlaceholder="Name, phone, email..."
                Filters="@filterItems"
                CurrentCount="@leads.Count"
                TotalCount="@totalLeads"
                HasActiveFilters="@HasActiveFilters"
                ShowSecondRow="true"
                OnSearchChanged="OnSearchChanged"
                OnApplyFilters="ApplyFilters"
                OnClearFilters="ClearFilters">
                
                <SecondRowContent>
                    <div class="col-md-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="hideExcluded" />
                            <label class="form-check-label small">
                                Hide Excluded/Opted Out
                            </label>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="scheduledCallbacksOnly" />
                            <label class="form-check-label small">
                                Scheduled Callbacks Only
                            </label>
                        </div>
                    </div>
                </SecondRowContent>
            </SearchFilterCard>

            <!-- Data Table using DataTable Component -->
            <DataTable TItem="LeadSummaryDto"
                       Items="@leads"
                       Columns="@tableColumns"
                       RowClassFunc="@GetRowClass"
                       EmptyTitle="No Leads Found"
                       EmptyMessage="@GetEmptyMessage()"
                       ShowPagination="true"
                       TotalCount="@totalLeads"
                       IsLoadingMore="@isLoadingMore"
                       OnLoadMore="LoadMoreLeads">
                       
                <EmptyAction>
                    @if (ListId.HasValue)
                    {
                        <a href="/lists/@ListId/leads/create" class="btn btn-primary">Add Your First Lead</a>
                    }
                    else
                    {
                        <a href="/leads/create" class="btn btn-primary">Create Your First Lead</a>
                    }
                </EmptyAction>
            </DataTable>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? ListId { get; set; }
    
    private List<LeadSummaryDto> leads = new();
    private string? errorMessage;
    private string? successMessage;
    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;
    private string lifecycleFilter = string.Empty;
    private string qualityFilter = string.Empty;
    private bool hideExcluded = false;
    private bool scheduledCallbacksOnly = false;
    private int totalLeads = 0;
    private int currentPage = 1;
    private readonly int pageSize = 50;
    private bool isLoadingMore = false;

    // Filter items for SearchFilterCard
    private List<SearchFilterCard.FilterItem> filterItems = new();
    private List<DataTable<LeadSummaryDto>.TableColumn<LeadSummaryDto>> tableColumns = new();

    protected override async Task OnInitializedAsync()
    {
        SetupFilters();
        SetupTableColumns();
        await LoadLeads();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reset when ListId parameter changes
        leads.Clear();
        currentPage = 1;
        await LoadLeads();
    }

    private void SetupFilters()
    {
        filterItems = new List<SearchFilterCard.FilterItem>
        {
            new() 
            { 
                Label = "Status", 
                ColumnWidth = 2,
                Value = statusFilter,
                Options = new List<SearchFilterCard.FilterOption>
                {
                    new() { Value = "", Text = "All Statuses" },
                    new() { Value = "NEW", Text = "New" },
                    new() { Value = "CALLED", Text = "Called" },
                    new() { Value = "CONTACTED", Text = "Contacted" },
                    new() { Value = "CALLBACK", Text = "Callback" },
                    new() { Value = "DNC", Text = "Do Not Call" },
                    new() { Value = "DISCONNECTED", Text = "Disconnected" },
                    new() { Value = "BUSY", Text = "Busy" },
                    new() { Value = "ANSWERING_MACHINE", Text = "Answering Machine" }
                }
            },
            new() 
            { 
                Label = "Lifecycle Stage", 
                ColumnWidth = 2,
                Value = lifecycleFilter,
                Options = new List<SearchFilterCard.FilterOption>
                {
                    new() { Value = "", Text = "All Stages" },
                    new() { Value = "NEW", Text = "New" },
                    new() { Value = "QUALIFIED", Text = "Qualified" },
                    new() { Value = "CONTACTED", Text = "Contacted" },
                    new() { Value = "CONVERTED", Text = "Converted" },
                    new() { Value = "RECYCLED", Text = "Recycled" }
                }
            },
            new() 
            { 
                Label = "Quality Score", 
                ColumnWidth = 2,
                Value = qualityFilter,
                Options = new List<SearchFilterCard.FilterOption>
                {
                    new() { Value = "", Text = "All Scores" },
                    new() { Value = "80-100", Text = "High (80-100)" },
                    new() { Value = "60-79", Text = "Medium (60-79)" },
                    new() { Value = "40-59", Text = "Fair (40-59)" },
                    new() { Value = "0-39", Text = "Low (0-39)" }
                }
            }
        };
    }

    private void SetupTableColumns()
    {
        tableColumns = new List<DataTable<LeadSummaryDto>.TableColumn<LeadSummaryDto>>
        {
            new() 
            { 
                Title = "Name", 
                PropertyName = "FullName",
                Template = @<text>
                    <strong>@context.FirstName @context.LastName</strong>
                    @if (!string.IsNullOrEmpty(context.Company))
                    {
                        <br /><small class="text-muted">@context.Company</small>
                    }
                    @if (!string.IsNullOrEmpty(context.FullName) && context.FullName != $"{context.FirstName} {context.LastName}")
                    {
                        <br /><small class="text-info">@context.FullName</small>
                    }
                </text>
            },
            new() 
            { 
                Title = "Phone", 
                PropertyName = "PrimaryPhone",
                Template = @<text>
                    @if (!string.IsNullOrEmpty(context.PrimaryPhone))
                    {
                        <a href="tel:@context.PrimaryPhone">@context.PrimaryPhone</a>
                    }
                </text>
            },
            new() 
            { 
                Title = "Email", 
                PropertyName = "PrimaryEmail",
                Template = @<text>
                    @if (!string.IsNullOrEmpty(context.PrimaryEmail))
                    {
                        <a href="mailto:@context.PrimaryEmail">@context.PrimaryEmail</a>
                    }
                </text>
            },
            new() 
            { 
                Title = "Status", 
                PropertyName = "Status",
                Template = @<text>
                    <StatusBadge Status="@context.Status" StatusType="lead" />
                    @if (!string.IsNullOrEmpty(context.Disposition))
                    {
                        <br /><small class="text-muted">@context.Disposition</small>
                    }
                </text>
            },
            new() 
            { 
                Title = "Lifecycle", 
                PropertyName = "LifecycleStage",
                Template = @<text>
                    <StatusBadge Status="@context.LifecycleStage" StatusType="default" />
                </text>
            },
            new() 
            { 
                Title = "Priority", 
                PropertyName = "Priority",
                Template = @<text>
                    <PriorityBadge Priority="@context.Priority" />
                    @if (context.Rank > 0)
                    {
                        <br /><small class="text-muted">Rank: @context.Rank</small>
                    }
                </text>
            },
            new() 
            { 
                Title = "Quality Score", 
                PropertyName = "QualityScore",
                Template = @<text>
                    <QualityScoreDisplay Score="@context.QualityScore" />
                </text>
            },
            new() 
            { 
                Title = "Call Count", 
                PropertyName = "CallCount",
                Template = @<text>
                    @context.CallCount
                    @if (context.CalledCount > 0)
                    {
                        <br /><small class="text-muted">(@context.CalledCount total)</small>
                    }
                </text>
            },
            new() 
            { 
                Title = "Last Called", 
                PropertyName = "LastCallAttempt",
                Template = @<text>
                    @if (context.LastCallAttempt.HasValue)
                    {
                        @context.LastCallAttempt.Value.ToString("MM/dd/yyyy HH:mm")
                    }
                    else
                    {
                        <span class="text-muted">Never</span>
                    }
                </text>
            },
            new() 
            { 
                Title = "Next Callback", 
                PropertyName = "ScheduledCallbackAt",
                Template = @<text>
                    @if (context.ScheduledCallbackAt.HasValue)
                    {
                        var callbackClass = context.ScheduledCallbackAt.Value < DateTime.Now ? "text-danger" : "text-success";
                        <span class="@callbackClass">@context.ScheduledCallbackAt.Value.ToString("MM/dd/yyyy HH:mm")</span>
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </text>
            },
            new() 
            { 
                Title = "Owner", 
                PropertyName = "Owner",
                Template = @<text>
                    @if (!string.IsNullOrEmpty(context.Owner))
                    {
                        <span>@context.Owner</span>
                    }
                    else if (!string.IsNullOrEmpty(context.User))
                    {
                        <span class="text-muted">@context.User</span>
                    }
                    else
                    {
                        <span class="text-muted">Unassigned</span>
                    }
                </text>
            },
            new() 
            { 
                Title = "Flags", 
                PropertyName = "IsExcluded",
                Template = @<text>
                    @if (context.IsExcluded)
                    {
                        <i class="fas fa-ban text-danger" title="Excluded"></i>
                    }
                    @if (context.HasOptedOut)
                    {
                        <i class="fas fa-user-slash text-warning ms-1" title="Opted Out"></i>
                    }
                    @if (context.ScheduledCallbackAt.HasValue && context.ScheduledCallbackAt.Value > DateTime.Now)
                    {
                        <i class="fas fa-clock text-success ms-1" title="Scheduled Callback"></i>
                    }
                </text>
            },
            new() 
            { 
                Title = "Actions", 
                PropertyName = "Id",
                Template = @<text>
                    <ActionButtonGroup 
                        ShowCall="true"
                        IsExcluded="@context.IsExcluded"
                        HasOptedOut="@context.HasOptedOut"
                        OnView="@(() => Navigation.NavigateTo($"/leads/{context.Id}"))"
                        OnEdit="@(() => Navigation.NavigateTo($"/leads/{context.Id}/edit"))"
                        OnCall="@(() => CallLead(context.Id))"
                        OnDelete="@(() => DeleteLead(context.Id))" />
                </text>
            }
        };
    }

    private string GetRowClass(LeadSummaryDto lead)
    {
        if (lead.IsExcluded) return "table-danger";
        if (lead.HasOptedOut) return "table-warning";
        if (lead.ScheduledCallbackAt.HasValue && lead.ScheduledCallbackAt.Value > DateTime.Now) return "table-info";
        return string.Empty;
    }

    private string GetEmptyMessage()
    {
        return ListId.HasValue ? "This list doesn't have any leads yet." : "You haven't created any leads yet.";
    }

    private bool HasActiveFilters => 
        !string.IsNullOrEmpty(searchTerm) || 
        !string.IsNullOrEmpty(statusFilter) || 
        !string.IsNullOrEmpty(lifecycleFilter) ||
        !string.IsNullOrEmpty(qualityFilter) ||
        hideExcluded ||
        scheduledCallbacksOnly;

    // ... (rest of the existing methods remain the same)
    
    private async Task LoadLeads()
    {
        try
        {
            errorMessage = null;
            var url = ListId.HasValue 
                ? $"api/lists/{ListId}/leads?page={currentPage}&pageSize={pageSize}"
                : $"api/leads?page={currentPage}&pageSize={pageSize}";
                
            if (!string.IsNullOrEmpty(searchTerm))
                url += $"&search={Uri.EscapeDataString(searchTerm)}";
                
            if (!string.IsNullOrEmpty(statusFilter))
                url += $"&status={statusFilter}";

            var response = await Http.GetFromJsonAsync<LeadListResponseDto>(url);
            if (response != null)
            {
                if (currentPage == 1)
                {
                    leads = response.Leads.ToList();
                }
                else
                {
                    leads.AddRange(response.Leads);
                }
                totalLeads = response.TotalCount;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load leads: {ex.Message}";
        }
    }

    private async Task LoadMoreLeads()
    {
        try
        {
            isLoadingMore = true;
            currentPage++;
            await LoadLeads();
        }
        finally
        {
            isLoadingMore = false;
        }
    }

    private async Task ApplyFilters()
    {
        // Update filter values from filterItems
        statusFilter = filterItems[0].Value;
        lifecycleFilter = filterItems[1].Value;
        qualityFilter = filterItems[2].Value;
        
        currentPage = 1;
        leads.Clear();
        await LoadLeads();
    }

    private async Task ClearFilters()
    {
        searchTerm = string.Empty;
        statusFilter = string.Empty;
        lifecycleFilter = string.Empty;
        qualityFilter = string.Empty;
        hideExcluded = false;
        scheduledCallbacksOnly = false;
        
        // Reset filter items
        foreach (var filter in filterItems)
        {
            filter.Value = string.Empty;
            filter.BoolValue = false;
        }
        
        await ApplyFilters();
    }

    private async Task OnSearchChanged(string searchText)
    {
        searchTerm = searchText;
        await ApplyFilters();
    }

    private void CallLead(int leadId)
    {
        try
        {
            // This would integrate with Azure Communication Services
            successMessage = $"Initiating call to lead {leadId}...";
            // TODO: Implement actual calling functionality
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initiate call: {ex.Message}";
        }
    }

    private async Task DeleteLead(int leadId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this lead? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/leads/{leadId}");
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Lead deleted successfully.";
                    await LoadLeads(); // Reload the list
                }
                else
                {
                    errorMessage = "Failed to delete lead.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to delete lead: {ex.Message}";
            }
        }
    }

    private void ShowImportModal()
    {
        // TODO: Implement bulk import modal
        errorMessage = "Import functionality will be implemented in a future update.";
    }
}
