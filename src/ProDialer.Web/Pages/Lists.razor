@page "/lists"
@using ProDialer.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Lists - ProDialer</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Lists</h1>
                <a href="/lists/create" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>Create New List
                </a>
            </div>

            @if (errorMessage != null)
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @if (lists == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!lists.Any())
            {
                <div class="text-center">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">No Lists Found</h5>
                            <p class="card-text">You haven't created any lists yet.</p>
                            <a href="/lists/create" class="btn btn-primary">Create Your First List</a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Priority</th>
                                        <th>Total Leads</th>
                                        <th>Called Leads</th>
                                        <th>Contacted Leads</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var list in lists)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@list.Name</strong>
                                            </td>
                                            <td>@list.Description</td>
                                            <td>
                                                <span class="badge bg-secondary">@list.Priority</span>
                                            </td>
                                            <td>@list.TotalLeads.ToString("N0")</td>
                                            <td>@list.CalledLeads.ToString("N0")</td>
                                            <td>@list.ContactedLeads.ToString("N0")</td>
                                            <td>
                                                @if (list.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Inactive</span>
                                                }
                                            </td>
                                            <td>@list.CreatedAt.ToString("MM/dd/yyyy")</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a href="/lists/@list.Id" class="btn btn-sm btn-outline-primary" title="View">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a href="/lists/@list.Id/edit" class="btn btn-sm btn-outline-secondary" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <a href="/lists/@list.Id/leads" class="btn btn-sm btn-outline-info" title="Manage Leads">
                                                        <i class="fas fa-users"></i>
                                                    </a>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteList(list.Id)" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ListSummaryDto>? lists;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadLists();
    }

    private async Task LoadLists()
    {
        try
        {
            lists = await Http.GetFromJsonAsync<List<ListSummaryDto>>("api/lists");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load lists: {ex.Message}";
        }
    }

    private async Task DeleteList(int listId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this list? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/lists/{listId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadLists(); // Reload the list
                }
                else
                {
                    errorMessage = "Failed to delete list.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to delete list: {ex.Message}";
            }
        }
    }
}
